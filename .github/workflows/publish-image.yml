name: Publish Container Image

on:
  push:
    # Publish `develop` as Docker `latest` image.
    branches:
      - "develop"

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: clang-toolchain

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Run tests
        uses: docker/build-push-action@v2
        with:
          push: false
          target: test
          cache-to: type=local,dest=/tmp/.buildx-cache
          cache-from: type=local,src=/tmp/.buildx-cache
          tags: ${{ env.IMAGE_NAME }}

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-20.04
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          key: buildx-{{ github.sha }}
          restore-keys: buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          push: false
          cache-to: type=local,dest=/tmp/.buildx-cache
          cache-from: type=local,src=/tmp/.buildx-cache
          tags: ${{ env.IMAGE_NAME }}


      - name: Log into registry in GitHub packages
        uses: docker/login-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Push image to GitHub packages
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "develop" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
